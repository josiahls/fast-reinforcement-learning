# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#  - bash: "sudo apt-get install -y xvfb freeglut3-dev python-opengl --fix-missing"
#    displayName: 'Install ffmpeg, freeglut3-dev, and xvfb'

stages:
 - stage: Test
   condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
   jobs:
   - job: 'Test'
     pool:
       vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'
     strategy:
       matrix:
         Python36:
           python.version: '3.6'
   #      Python37:  # Pyglet and gym do not working here
   #        python.version: '3.7.5'
       maxParallel: 4

     steps:
     - task: UsePythonVersion@0
       inputs:
         versionSpec: '$(python.version)'

     - bash: "sudo apt-get install -y freeglut3-dev python-opengl"
       displayName: 'Install freeglut3-dev'

     - script: |
         python -m pip install --upgrade pip setuptools wheel pytest pytest-cov python-xlib -e .
         python setup.py install
       displayName: 'Install dependencies'

     - script: sh ./build/azure_pipeline_helper.sh
       displayName: 'Complex Installs'

     - script: |
         xvfb-run -s "-screen 0 1400x900x24" py.test tests --cov fast_rl --cov-report html --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=xml --cov-report=html
       displayName: 'Test with pytest'

     - task: PublishTestResults@2
       condition: succeededOrFailed()
       inputs:
         testResultsFiles: '**/test-*.xml'
         testRunTitle: 'Publish test results for Python $(python.version)'

 - stage: Deploy
   condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
   jobs:
    - job: "TwineDeploy"
      pool:
        vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
      # Install python distributions like wheel, twine etc
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo $TWINE_USERNAME
            pip install wheel setuptools twine
            python setup.py sdist bdist_wheel
            python -m twine upload -u $TWINE_USERNAME -p $TWINE_PASSWORD --repository-url 'https://upload.pypi.org/legacy/' dist/*
        env:
          TWINE_PASSWORD: $(SECRET_TWINE_PASSWORD)
          TWINE_USERNAME: $(SECRET_TWINE_USERNAME)